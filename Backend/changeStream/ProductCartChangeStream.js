const mongoose = require("mongoose");
const Product = require("../models/ProductModel");
const Cart = require("../models/CartModel")

// Stock:
// - Khi th√™m stock: c√°c cart ch·ª©a variant quantity nh·ªè h∆°n (ƒë·ªïi state th√†nh ƒë·ªß h√†ng), state c·ªßa variant trong product ƒë·ªïi th√†nh c√≤n h√†ng 
// - Khi update gi·∫£m stock: c√°c cart ch·ª©a variant quantity l·ªõn h∆°n (ƒë·ªïi state th√†nh kh√¥ng ƒë·ªß h√†ng)
// - Khi stock = 0: c√°c cart ch·ª©a variant quantity l·ªõn h∆°n (ƒë·ªïi state th√†nh kh√¥ng ƒë·ªß h√†ng). state c·ªßa variant trong product ƒë·ªïi th√†nh H·∫øt h√†ng


// Status:
// - Khi update stock ng·ª´ng kinh doanh: T·∫•t c·∫£ c√°c cart g·ªìm variant cart chuy·ªÉn th√†nh ngung kinh doanh.
// - Mu·ªën kinh doanh l·∫°i -> B·∫•m n√∫t kinh doanh l·∫°i -> H·ªá th·ªëng t·ª± x√°c ·ªãnh c√≤n state l√† c√≤n h√†ng hay kh√¥ng

const EmptyStock = async (variantId)=>{
    const result = await Cart.updateMany(
                        {"items.variant":variantId},
                        {
                            $set:{"items.$[elem].status":"H·∫øt h√†ng"}
                        },
                        {
                            arrayFilters:[{"elem.variant":variantId}]
                        }
                    )
}

const NotEnoughStock = async (variantId,newStock) =>{
    const result_NotEnoughStock = await Cart.updateMany(
                        {
                            "items.variant":variantId
                        },
                        {   $set:   {   "items.$[elem].status":"Kh√¥ng ƒë·ªß h√†ng" }   },
                        
                        {   arrayFilters:
                            [  
                                {   
                                    "elem.variant":variantId,
                                    "elem.quantity": {$gt:newStock}
                                }
                               
                            ]       
                        }
                    )
}


const Restock = async (variantId,newStock)=>{
    const result_ReStock = await Cart.updateMany(
                        {
                            "items.variant":variantId
                        },
                        {   $set:   {   "items.$[elem].status":"ƒê·ªß h√†ng" }   },
                        {   arrayFilters:[  
                                {   "elem.variant":variantId,
                                    "elem.quantity": {$lte:newStock}    
                                }
                            ]       
                        }
                    )

}

const ChangeStateCartProduct = async(productId,state)=>{
    
        const result_changeStateAllProduct = await Cart.updateMany(
            {
                "items.item":productId
            },
            { $set:{ "items.$[elem].status":state}},
            { 
                arrayFilters: 
                [
                    {"elem.item": productId}
                ]
            }
        )
    
}
const ChangeStateProduct = async(productId,state) =>{
    const result_changeStateProduct = await Product.updateOne(
        {
            "_id":productId
        },
        { $set:{ "status":state}}
    )

}

const UpdateAllStockProductVariants = async(productId,quantity)=>{
    const result_updateAllStockProductVariants = await Product.updateMany(
        {
            "_id" : productId
        },
        {   $set:{"variants.$[].stock" : quantity}  }
    )
}

async function watchProductVariants(){
    const db = mongoose.connection;
    const changeStream = db.collection("products").watch([
        {   $match  : { operationType:"update"  } }
    ]);

    console.log("üîÅ Watching Product Variants update.....")

    changeStream.on("change",async(change)=>{
        const productId = change.documentKey._id;
        const updatedFields = change.updateDescription?.updatedFields;
        
        for(let field in updatedFields){ //For .. in duy·ªát qua key (kh√¥ng ph·∫£i value)

            if(field.startsWith("variants") && field.endsWith(".stock")){
                const parts = field.split(".");
                const variantIndex = parts[1];
                const newStock = updatedFields[field];

                    const product = await Product.findById(productId);
                    const variant = product.variants[variantIndex];
                    const variantId = variant._id;
                    
                if(newStock === 0){
                    if(product.variants[variantIndex].status != "Ng·ª´ng kinh doanh"){
                        console.log(`B·∫°n v·ª´a update stock c·ªßa ${product.name} c√≥ ph√¢n lo·∫°i: ${variantId} th√†nh 0` )
                        await EmptyStock(variantId);
                        console.log(`Update s·∫£n ph·∫©m ${product.name} variant ${variantId} th√†nh status H·∫øt h√†ng`)
                    }
                    //OK
                }
                else{
                    console.log(`B·∫°n v·ª´a update stock`);
                    if(product.variants[variantIndex].status != "Ng·ª´ng kinh doanh"){
                        //Gi·∫£m stock
                        
                        await NotEnoughStock(variantId,newStock);
                        //Th√™m stock
                        await Restock(variantId,newStock);
                    }
                    console.log(`Update s·∫£n ph·∫©m ${product.name} variant ${variantId} th√†nh`)

                }
                if(product.status !="Ng·ª´ng kinh doanh"){

                    const sum = product.variants.reduce((a,b)=> a+b.stock,0);
                    
                    if(sum==0 && product.status!="H·∫øt h√†ng"){
                        console.log(`Chuy·ªÉn state ${product.name} product sang H·∫øt h√†ng` )
                        await ChangeStateProduct(productId,"H·∫øt h√†ng")
                    }
                    else if(sum>0 && product.status!="C√≥ s·∫µn"){
                        console.log(`Chuy·ªÉn state ${product.name} product sang C√≥ s·∫µn` )
                        await ChangeStateProduct(productId,"C√≥ s·∫µn")
                    }
                }
                
                

            }
            else if(field.startsWith("status")){
                const product = await Product.findById(productId);
                const newStatus = updatedFields[field];
                if(newStatus === "Ng·ª´ng kinh doanh"){

                    console.log(`Chuy·ªÉn t·∫•t c·∫£ cart c√≥ ${product.name} product sang state Ng·ª´ng kinh doanh` )
                    
                    await ChangeStateCartProduct(productId,"Ng·ª´ng kinh doanh");

                }
                else if (newStatus === "C√≥ s·∫µn"){
                    // 1.1) SUM l·∫°i xem n√≥ c√≥ b·∫±ng = 0? 
                    const sum = product.variants.reduce((a,b)=> a+b.stock,0);
                    console.log(sum);
                    if(sum == 0 ){

                        // Chuy·ªÉn t·∫•t c·∫£ state c·ªßa variant trong product th√†nh H·∫øt h√†ng
                        
                        await ChangeStateCartProduct(productId,"H·∫øt h√†ng");

                        // Update l·∫°i Product th√†nh H·∫øt h√†ng
                        await ChangeStateProduct(productId,"H·∫øt h√†ng")
                       
                        
                    }
                    else{
                        product.variants.map(async (item)=>
                            {
                                await NotEnoughStock(item._id, item.stock);
                                await Restock(item._id, item.stock);
                            }
                        )
                        
                    }
                    

                }
                else if(newStatus === "H·∫øt h√†ng"){

                   
                    await UpdateAllStockProductVariants(productId,0);

                    
                    await ChangeStateCartProduct(productId,"H·∫øt h√†ng");

                }
                
            }

        }
    })


}

module.exports = watchProductVariants;